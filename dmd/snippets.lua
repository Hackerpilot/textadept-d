local M = {}

M.snippets = {
	gpl = [[/*******************************************************************************
 * Authors: %1(Your name here)
 * Copyright: %1
 * Date: %[date | cut -c 5-10] %[date | cut -c 25-]
 *
 * License:
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version
 * 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston,
 * MA 02111-1307, USA.
 ******************************************************************************/

%0]],

	gpl3 = [[/*******************************************************************************
 * Authors: %1(Your name here)
 * Copyright: %1
 * Date: %[date | cut -c 5-10] %[date | cut -c 25-]
 *
 * License:
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/

%0]],
	mit = [[/*******************************************************************************
 * The MIT License
 *
 * Copyright (c) %[date | cut -c 25-] %1(Your name here)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 ******************************************************************************/

%0]],
	boost = [[/*******************************************************************************
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
]],
	banner = [[/%<string.rep("*", buffer.edge_column - buffer.column[buffer.current_pos] - 1)>
 * %0
 %<string.rep("*", buffer.edge_column - buffer.column[buffer.current_pos] - 2)>/]],
	fun = [[%1(return type) %2(name)(%3(parameters))
{
	%0
	return ;
}]],
	vfun = [[void %1(name)(%2(parameters))
{
	%0
}]],
	main = [[void main(string[] args)
{
	%0
}]],
	['for'] = [[for (%1(initilization); %2(condition); %3(increment))
{
	%0
}]],
	fore = [[foreach (%1(var); %2(range))
{
	%0
}]],
	forei = [[foreach (%1(i); 0..%2(n))
{
	%0
}]],
	forr = [[foreach (ref %1(var); %2(range))
{
	%0
}]],
	fori = [[for (size_t i = 0; i != %1(condition); ++i)
{
	%0
}]],
	['while'] = [[while (%1(condition))
{
	%0
}]],
	['if'] = [[if (%1(condition))
{
	%0
}]],
	dw = [[do
{
	%0
} while (%1(condition));]],
	sw = [[switch (%1(value))
{
%0
default:
	break;
}]],
	fsw = [[final switch (%1(value))
{
%0
default:
	break;
}]],
	case = [[case %1:
	%0
	break;]],
	class = [[class %1(name)
{
public:

private:
	%0
}]],
	struct = [[struct %1(name)
{
	%0
}]],
	mem = 'this.%1 = %1;\n%0',
	dump = 'writeln("%1 = ", %1);',
	trace = 'writeln(__FILE__, " ", __LINE__);',
	wf = 'writef(%0);',
	wl = 'writeln(%0);',
	wfl = 'writefln(%0);',
	imp = 'import',
	sta = 'static',
	st = 'string',
	wch = 'wchar',
	dch = 'dchar',
	ch = 'char',
	dou = 'double',
	fl = 'float',
	by = 'byte',
	ret = 'return',
	im = 'immutable',
	co = 'const',
	ty = 'typeof',
	iit = [[if(is(typeof(%1)))
{
	%0
}]],
	itc = [[if(__traits(compiles, %1))
{
	%0
}]],
	sif = [[static if(%1)
{
	%0
}]]
}

return M
